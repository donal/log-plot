#!/usr/bin/env ruby

require 'log-plot'
require 'optparse'

options = {
  period: 300,
  output: "plot.png",
  log_type: :access,
  verbose: false
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: log-plot [-opt] log_file"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-p", "--period PERIOD", Integer,
          "Specify requests per period for plotting",
          "  from 1 to 3600 seconds") do |period|
    if period < 1 || period > 3600
      raise ArgumentError,"PERIOD must be between 1 and 3600 inclusive"
    end
    options[:period] = period
  end

  opts.on("-o", "--output OUTPUT",
          "Filename of outputted plot") do |output|
    options[:output] = output
  end

  opts.on("-t", "--type TYPE", [:access, :error],
          "Log type (access, error)") do |log_type|
    options[:log_type] = log_type
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on_tail("-V", "--version", "Show version") do
    puts LogPlot::VERSION
    exit
  end
end

begin
  parser.parse!(ARGV)

  if ARGV[0] && !File.exists?(ARGV[0])
    $stderr.puts "log-plot: #{ARGV[0]}: No such log file"
    exit 1
  end
  if ARGF.filename == '-'
    if (STDIN.tty? || STDIN.closed?)
      $stderr.puts "log-plot: STDIN input was empty"
      exit 1
    elsif ARGF.eof?
      $stderr.puts "log-plot: STDIN input was empty"
      exit 1
    end
  end
  LogPlot::Application.new(ARGF, options).run
rescue Errno::ENOENT => e
  $stderr.puts "log-plot: #{e.message}"
  exit 1
rescue OptionParser::InvalidOption,
       OptionParser::MissingArgument,
       ArgumentError => e
  $stderr.puts "log-plot: #{e.message}\n#{parser.banner}"
  exit 1
end


